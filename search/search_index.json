{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Industrial Shields Documentation  new","text":"<p>Welcome to the Industrial Shields Documentation Website! Here you'll find all the essential information and resources you need for Industrial Shields products\u2014fast and hassle-free.</p> <p>Encountering technical issues? Reach out to our Technical Support Team for assistance.</p>"},{"location":"#Industrial-Shields-PLC","title":"Industrial Shields PLC","text":"<ul> <li> <p>Ardbox Family <p> </p> <p>It's coming soon </p> <li> <p>M-Duino Family <p> </p> <p>It's coming soon </p> <li> <p>CONTROLLINO <p> </p> <p> </p> <li> <p>WIS PLC <p> </p> <p>It's coming soon </p> <li> <p>ESP32 PLC 14 <p> </p> <p>It's coming soon </p> <li> <p>ESP32 PLC Family <p> </p> <p>It's coming soon </p> <li> <p>GateBerry <p> </p> <p> </p> <li> <p>RPIPLC Family <p> </p> <p>It's coming soon </p> <ul> <li> <p>Touchberry Family <p> </p> <p>It's coming soon </p>"},{"location":"gateberry/","title":"GateBerry","text":"<p> GateBerry is a compact PLC built on the Raspberry Pi platform, combining the flexibility of open computing with industrial-grade reliability. Featuring an integrated UPS, RS-485 interface, 5V I\u00b2C bus, and real-time clock, it ensures continuous operation and seamless communication. With an expansion slot for and aditional communication like: LoRa, CAN, 4G, and more, GateBerry is the perfect bridge between IoT innovation and industrial automation.     </p> What is included on purchase (default product) <ul> <li>1x GateBerry (2,4 or 8 GB RAM, selectable at the moment of purchase)</li> <li>1x Screw connector (2 pin)</li> <li>1x Push-in connector (6 pin)</li> <li>1x MicroSD 20GB (Industrial Grade)(Incude: Debian Bookworm 64 bit (With custom configurations))</li> </ul> <p>The pack includes an antenna in case the product is equipped with additional communication that requires it.</p> <p>Requirements to use</p> <ul> <li>1x GateBerry </li> <li>1x Ethernet wire (ssh connection) or 1x Keyboard &amp; mouse (wtih desktop interfice) </li> <li>DC Power supply (12V-24V)</li> </ul>"},{"location":"gateberry/#Pinout","title":"Pinout","text":""},{"location":"gateberry/#Technical-Features","title":"Technical Features","text":"Board Original Raspberry Pi 4B CPU Broadcom BCM2711, Quad core (ARM v8) 64-bit SoC Clock speed 1.8 GHz RAM 2GB | 4GB | 8GB Storage MicroSD 20GB (Industrial Grade)(Incude: Debian Bookworm 64 bit (With custom configurations)) Cooling sistem Heat sink included in TS35 DIN Rail UPS Controlled by software to safely shutdown the Raspberry PI when power failure RTC  PCF85363 Real Time Clock, powered with button battery included (CR1216 or CR1220) USB x2 USB-A 2.0, x2 USB-A 3.0 Ethernet x1 Gbit Ethernet, RJ45 connector RS485 x1 RS485 interfice (half-duplex) with software switchable 120\u03a9 termination resistor I\u00b2C 5V I\u00b2C bus, direct from Raspberry PI board. Address 0x51 is in use"},{"location":"gateberry/#Block-diagram","title":"Block diagram","text":"GeneralExpansion Board Connections"},{"location":"gateberry/#Usage-environments","title":"Usage environments","text":"IP protection IP 20 Storage temperature 0 to 60 \u00baC Ambient environment (operating) 0 to 55\u00baC with no corrosive gas. The dry heat test is performed at 55 \u00b0C for 300 hours under load, ensuring stable operation and long-term reliability. Ambient humidity (operating temperature) 10 % to 95 % (no condensation). The equipment maintains correct operation under ambient humidity conditions up to 95 % RH in the cyclic damp-heat test (35 \u00b0C to 25 \u00b0C for 1000 hours), without degradation of performance Dielectric strength The dielectric withstands a leakage current of less than 1\u202fmA when a voltage of 1200\u202fV\u202fDC is applied for 2\u202fseconds. Vibration resistance The equipment withstands continuous vibration from 5 to 9 Hz at 1.75 mm amplitude and from 9 to 150 Hz at 4.9 m/s\u00b2 acceleration, in accordance with EN 61131-2. Inpact resistance A shock (impact) test of up to 147 m/s\u00b2 (15 g) applied three times in each of the X, Y, and Z directions."},{"location":"gateberry/#Measures","title":"Measures","text":"Technical DrawingDataAssembly recommendations <p> Dimensions 91 x 71 x 62 mm (witout connectors) Weight ~221 g (without expansion board) DIN Rail TS35 </p> <p> </p>"},{"location":"gateberry/#Power-supply","title":"Power supply","text":"<p>The GateBerry PLC is designed to be powered at 24 Vdc, however the power supply range is 12 to 24 Vdc.</p> <p>Danger</p> <p>Exceeding these limits may cause the equipment to malfunction, or even end up being damaged.</p> <p>Next, a simple diagram is shown to see how to connect a power supply to any Industrial Shields unit.</p>"},{"location":"gateberry/#Consumption-characteristics","title":"Consumption characteristics","text":"<p>This report explores how different GateBerry consume power during idle and stress scenarios. Understanding these patterns is crucial for optimizing efficiency in industrial applications.</p> Stand-by modeStress mode <p>In this scenario, the GateBerry is powered on, with all pins and communications turned off. This test measures the baseline power consumption when the device is idle and not actively engaged in any processing or other non-basic tasks.</p> VOLTAGE (V) CURRENT (mA) POWER (W) 24 ~400 ~9.6 12 ~1000 ~12 <p>Under stress conditions, the GateBerry is subjected to intensive computational tasks or high-demand processes. This test evaluates the peak power consumption when the device is operating at its maximum capacity, providing valuable information for scenarios where the PLC is under heavy load. This test is done using the <code>stress-ng</code> comand.</p> VOLTAGE (V) CURRENT (mA) POWER (W) 24 ~750 ~18 12 ~1900 ~22.8 <p>All of these calculations are approximate and have been measured using the <code>standard GateBerry</code> product, a <code>Raspberry PI 4 Model B with 2 GB RAM</code>. Several factors can affect power consumption, for example:</p> <ul> <li>Raspberry Pi model</li> <li>Expansion Boards</li> <li>Temperature and environmental conditions</li> <li>Power quality</li> </ul>"},{"location":"gateberry/#Custom-configurations","title":"Custom configurations","text":"<p>When you purchase a GateBerry, from the factory, this PLC comes with our custom image installed.</p> <p>Latest image version</p> <p>You can download the latest image for this product here.</p> Image versions <p>Here you will find the different image versions we have available for customers.</p> <p>The configurations in the latest published image are shown below:</p> SummarizedExtended <p> Hardware Configure SPI, I2C, UART, UPS and RTC System Disables kernel messaging to serial, enables SSH Network Fixed IP <code>10.10.10.20</code> on <code>eth0</code> Logs Enable compression and 50 MB limit Udev Create symlinks <code>/dev/rs485</code> and <code>/dev/exp_serial</code> Repositories Add Industrial Shields font and its GPG key Packages Install RPI PLC libraries, utilities, Node-RED install (Nodered is not installed by default) User Copy base configuration and permissions, default user:  username: <code>pi</code>  password: <code>raspberry </code> Servicios Activate <code>rpishutdown-boot-watchdog.service</code> and SSH </p>"},{"location":"gateberry/#1-Modifications-to-bootconfigtxt","title":"1. Modifications to /boot/config.txt","text":"<p>Add the \"GateBerry V9\" configuration:</p> <ul> <li> <p>Enable UPS:</p> <ul> <li><code>dtoverlay=gpio-poweroff,gpiopin=23,active_low</code></li> <li><code>dtoverlay=gpio-shutdown,gpio_pin=24,gpio_pull=up</code></li> </ul> </li> <li> <p>Enable SPI with 2 chip selects:</p> <ul> <li><code>dtparam=spi=on</code></li> <li><code>dtoverlay=spi0-2cs,cs0_pin=8,cs1_pin=7</code></li> </ul> </li> <li> <p>Enable I2C and RTC clock on the I2C bus:</p> <ul> <li><code>dtparam=i2c_arm=on</code></li> <li><code>dtoverlay=i2c-rtc, pcf85363</code></li> </ul> </li> <li> <p>Optimize boot:</p> <ul> <li><code>initial_turbo=60</code> (increases CPU frequency for the first 60 seconds)</li> </ul> </li> <li> <p>Enable UART PL011:</p> <ul> <li><code>dtoverlay=miniuart-bt</code></li> <li><code>enable_uart=1</code></li> </ul> </li> <li> <p>Specific configuration for RPi 4:</p> <ul> <li><code>dtoverlay=uart3</code></li> </ul> </li> <li> <p>Specific configuration for RPi 5 (does not affect RPi 4):</p> <ul> <li>Disable internal RTC and enable <code>uart2</code>.</li> </ul> </li> </ul>"},{"location":"gateberry/#2-Serial-console-setup","title":"2. Serial console setup","text":"<p>Remove <code>console=serial0,115200</code> from <code>/boot/cmdline.txt</code></p> <p>Disable kernel messages through the RS-485 port (/dev/ttyAMA0).</p>"},{"location":"gateberry/#3-UDEV-Rules-and-Symlink-Script","title":"3. UDEV Rules and Symlink Script","text":"<p>Create <code>/etc/udev/rules.d/99-IndustrialShields.rules</code>:</p> <ul> <li><code>/dev/ttyAMA0</code> \u2192 symlink <code>/dev/rs485</code></li> <li>For RPi 4 \u2192 run <code>/usr/local/bin/create_exp_serial.sh</code> when <code>/dev/ttyAMA3</code> is detected</li> </ul> <p>Create <code>/usr/local/bin/create_exp_serial.sh</code>:</p> <ul> <li>Detect the model (RPi 4 or 5)</li> <li>On RPi 4 \u2192 create symlink <code>/dev/exp_serial \u2192 /dev/ttyAMA3</code></li> <li>On RPi 5 \u2192 create symlink <code>/dev/exp_serial \u2192 /dev/ttyAMA2</code></li> </ul>"},{"location":"gateberry/#4-Kernel-Modules","title":"4. Kernel Modules","text":"<p>Add <code>i2c-dev</code> to the file <code>/etc/modules</code></p> <p>Automatically loads the I\u00b2C module at boot time.</p>"},{"location":"gateberry/#5-Logging-System-Configuration-journald","title":"5. Logging System Configuration (journald)","text":"<p>Modify <code>/etc/systemd/journald.conf</code>:</p> <ul> <li>Enable compression: <code>Compress=yes</code></li> <li>Limit the total journal size to 50 MB</li> </ul>"},{"location":"gateberry/#6-Network-NetworkManager","title":"6. Network (NetworkManager)","text":"<p>Configure a static Ethernet connection:</p> <ul> <li>Interface: <code>eth0</code></li> <li>IP address: <code>10.10.10.20/24</code></li> <li>Save configuration to <code>/etc/NetworkManager/system-connections/eth0-1.nmconnection</code></li> </ul>"},{"location":"gateberry/#7-Services","title":"7. Services","text":"<ul> <li>Enable SSH to start automatically.</li> <li>Install and enable the <code>rpishutdown-boot-watchdog</code> service (downloaded from the Industrial Shields server):<ul> <li>Monitor the UPS status during boot time.</li> </ul> </li> </ul>"},{"location":"gateberry/#8-APT-Repositories-and-GPG-Keys","title":"8. APT Repositories and GPG Keys","text":"<ul> <li>Add the Industrial Shields repository to <code>/etc/apt/sources.list</code></li> <li>Download and install its public GPG key</li> <li>Run <code>apt update</code></li> </ul>"},{"location":"gateberry/#9-Installing-Packages","title":"9. Installing Packages","text":"<p>Install:</p> <ul> <li> <p>Custom libraries:</p> <ul> <li><code>librpiplc=4.1.1</code></li> <li><code>python3-librpiplc=4.0.2</code></li> <li><code>rpishutdown-pre-poweroff=1.0.0</code></li> <li><code>librpiplc-tests-gateberry-v9</code></li> </ul> </li> <li> <p>Additional dependencies:</p> <ul> <li><code>python3-pip</code></li> <li><code>python3-serial</code></li> <li><code>python3-websockets</code></li> <li><code>python3-aiofiles</code></li> <li><code>ppp, ppp-dev, i2c-tools</code></li> </ul> </li> <li> <p>Extra Python:</p> <ul> <li>Install <code>aioserial</code> with <code>pip</code>.</li> </ul> </li> </ul>"},{"location":"gateberry/#10-Node-RED","title":"10. Node-RED","text":"<ul> <li>Download the official Node-RED installation script to <code>/etc/skel/.install-node-red.sh</code></li> <li>Create the script <code>/etc/skel/install-node-red.sh</code> to run the installer for version 4.1.0.</li> <li>Both scripts will be copied to the new users created from <code>/etc/skel</code>.</li> </ul>"},{"location":"gateberry/#11-User-pi","title":"11. User pi","text":"<ul> <li>Copy the entire contents of <code>/etc/skel</code> to <code>/home/pi</code></li> <li>Change the owner of <code>/home/pi</code> to <code>pi:pi</code></li> </ul>"},{"location":"gateberry/#12-Cleanup-and-Sync","title":"12. Cleanup and Sync","text":"<ul> <li>Run <code>apt clean</code></li> <li>Run <code>sync</code> to ensure changes are written to disk.</li> </ul>"},{"location":"gateberry/gateberry-expansion/","title":"GateBerry - Expansion Boards","text":"<p>The GateBerry PLC has 1 slot for additional comunication. Check the pinout in the block diagram.</p>"},{"location":"gateberry/gateberry-expansion/#4G-LTE-CAT-M1--NB-IoT","title":"4G (LTE CAT M1 / NB-IoT)","text":"<p>4G LTE CAT M1/NB-IoT are cellular communication technologies designed for the Internet of Things (IoT). They provide low-power, wide-coverage, and cost-efficient connectivity, ideal for devices that transmit small amounts of data such as sensors, smart meters, and trackers.</p>"},{"location":"gateberry/gateberry-expansion/#Module","title":"Module","text":"<p>The module used to provide LTE CAT M1 and NB IoT communication is the Ublox SARA range, specifically the modules:</p> <ul> <li>SARA-R412M</li> <li>SARA-R422M8S</li> </ul> <p>Here are some of their manuals:</p> <ul> <li>Datasheet</li> <li>Application note</li> <li>AT Commands Manual</li> </ul>"},{"location":"gateberry/gateberry-expansion/#Hardware-Setup","title":"Hardware Setup","text":"<p>When purchasing a GateBerry equipped with the cellular communication expansion module, an additional output is provided for external antennas through female SMA coaxial connectors, which are directly linked to the communication module.</p> <p>The hardware assembly should appear as shown in the following image:</p> <p>The device includes a SIM card slot, located as shown in the image below:</p> SIM recomendation <p>The module only supports Micro SIM cards. If you have a Nano SIM, please use a Micro SIM adapter to ensure proper fit and to prevent connector damage.</p> <p> </p> <p>It is recommended to use precision tweezers when inserting or removing the SIM card to protect both the connector and the card.</p>"},{"location":"gateberry/gateberry-expansion/#Software-Setup","title":"Software Setup","text":"<p>This setup allows us to configure the connection with the module. It only needs to be done once.</p> <ol> <li> <p>Check if <code>dtoverlay=uart3</code> or <code>dtoverlay=uart2</code> (Depending on the Raspberry PI version) in <code>/boot/firmware/config.txt</code></p> <pre><code>sudo nano /boot/firmware/config.txt\n</code></pre> <p>Look for these configuration lines (RPIv4)   <pre><code>dtoverlay=uart3\n</code></pre></p> <p>Look for these configuration lines (RPIv5)   <pre><code>dtoverlay=uart2\n</code></pre></p> <p>If it does not exist, it should be added, and then reboot the device to make the changes effective.</p> <pre><code>sudo reboot now\n</code></pre> </li> <li> <p>Copy or Download the setup</p> <p>Warning</p> <p>If your SIM needs to be unlocked using a PIN number, this script will not work for it.</p> <p>Check it here: setup-sara.sh</p> <pre><code>nano setup-sara.sh\n</code></pre> <p>or, if you have an internet connection, download this file as follows</p> <pre><code>wget https://apps.industrialshields.com/main/rpi/gateberry/setup-sara.sh\n</code></pre> <p>To make the script executable, run the following command:   <pre><code>chmod +x setup-sara.sh\n</code></pre></p> <p>Next, execute the script with administrative privileges:</p> <pre><code>sudo ./setup-sara.sh\n</code></pre> <p>During execution, the script will prompt you to enter your connection credentials, as shown below.</p> <p></p> <p>Once the process is complete, two system services will be created:</p> <ul> <li>pppd.service: responsible for creating the ppp0 interface to simplify the connection process.</li> <li>check-ppp0.service: ensures that the interface and connection are functioning correctly.</li> </ul> </li> </ol>"},{"location":"gateberry/gateberry-expansion/#Working-Test--Troubleshooting","title":"Working Test &amp; Troubleshooting","text":"<ol> <li> <p>Check service status</p> <p>Run the following commands to verify that the services are active: <pre><code>sudo systemctl status check-ppp0.service\nsudo systemctl status pppd.service\n</code></pre></p> </li> <li> <p>Stop the services</p> <p>Before executing the communication test script, stop the services to prevent communication conflicts with the module: <pre><code>sudo systemctl stop check-ppp0.service\nsudo systemctl stop pppd.service\n</code></pre></p> </li> <li> <p>Run the test script</p> <p>To test communication with the module, execute the configuration script in NB mode. This step is only intended to confirm that communication is working correctly. <pre><code>/usr/bin/python3 /usr/local/bin/network-setup.py nb-iot\n</code></pre></p> </li> <li> <p>Verify network interface</p> <p>If the script completes successfully, list the network interfaces with: <pre><code>ip a\n</code></pre> You should see the ppp0 interface. To verify network access, run: <pre><code>ping -I ppp0 8.8.8.8\n</code></pre></p> </li> <li> <p>Restart the services</p> <p>After completing the test, restart the services using:</p> <p><pre><code>sudo systemctl start check-ppp0.service\nsudo systemctl start pppd.service\n</code></pre> 6. Restore system state</p> <p>Finally, reboot the system to return to its normal operating state: <pre><code>sudo reboot\n</code></pre></p> </li> </ol>"},{"location":"gateberry/gateberry-expansion/#CAN","title":"CAN","text":"<p>CAN (Controller Area Network) is a robust communication protocol designed for real-time data exchange between electronic control units (ECUs) in vehicles and industrial systems. It enables reliable, high-speed, and error-resistant communication without requiring a central computer, making it ideal for automotive, industrial, and automation applications.</p>"},{"location":"gateberry/gateberry-expansion/#Module_1","title":"Module","text":"<p>The selected module for enabling GateBerry PLC to communicate via the CAN protocol is the MCP2515, connected to the PLC through SPI. It allows configuring a 120 \u03a9 termination resistor (selectable at the time of PLC purchase).</p>"},{"location":"gateberry/gateberry-expansion/#Important-features-and-values-to-consider","title":"Important features and values \u200b\u200bto consider","text":"Interface typeCAN Bus Communication speed (baud rate)Configurable Connectors and wiringM3 addaptor connector (H (CAN High) and L (CAN Low)) Termination resistor120 ohms (selectable at the time of PLC purchase)"},{"location":"gateberry/gateberry-expansion/#Hardware-setup","title":"Hardware setup","text":""},{"location":"gateberry/gateberry-expansion/#CAN-Bus-Connection","title":"CAN Bus Connection","text":"<p>The PLC can be connected to the CAN bus as shown in the image below:</p> Termination resistor configuration <p>When purchasing the PLC you must select whether you will use the PLC at one end of the line or in the middle of the bus.</p> <ul> <li>If you use it at one end, select the default option, where this resistor is built in.</li> <li>Otherwise, select the option that eliminates this termination resistor.</li> </ul>"},{"location":"gateberry/gateberry-expansion/#Software-setup","title":"Software setup","text":"<p>To configure the CAN module and establish communication with the PLC, follow these steps:</p> <p>Edit the firmware configuration file <code>/boot/firmware/config.txt</code>: <pre><code>sudo nano /boot/firmware/config.txt\n</code></pre></p> <p>Add the following overlay: <pre><code>dtoverlay=mcp2515,spi0-0,oscillator=10000000,interrupt=21,speed=125000\n</code></pre> Parameters explanation:</p> <ul> <li>spi0-0: MCP2515 connected to SPI bus with CS on gpio 8.</li> <li>oscillator=10000000: 10 MHz oscillator.</li> <li>interrupt=21: interrupt pin.</li> <li>speed=125000: default baudrate 125 kbps.</li> </ul> <p>Save and exit with Ctrl + S and Ctrl + X.</p> <p>Reboot the PLC to apply changes:</p> <pre><code>sudo reboot\n</code></pre> <p>Verify correct module initialization, with the command: <pre><code>dmesg | grep mcp\n</code></pre> You can also check with:<code>ifconfig can0</code> or <code>ip a</code></p> <p>If CAN doesn't appear as UP, use this command to change its status: <pre><code>sudo ip link set can0 up type can bitrate 125000\n</code></pre></p>"},{"location":"gateberry/gateberry-expansion/#Working-Test--Troubleshooting_1","title":"Working Test &amp; Troubleshooting","text":"<p>To ensure the module works correctly, use the tools provided by the <code>can-utils</code> library. Install can-utils <pre><code>sudo apt install can-utils\n</code></pre></p> <p><pre><code>candump can0\n</code></pre> If the bus is configured correctly, this command will display data transmitted over the CAN bus.</p> <pre><code>cansend can0 111#FF\n</code></pre> <ul> <li>111: CAN message identifier.</li> <li>FF: data sent in hexadecimal.</li> </ul> <p>This command allows testing communication by sending test messages on the CAN network and verifying reception on other connected nodes.</p>"},{"location":"gateberry/gateberry-expansion/#LoRa","title":"LoRa","text":"<p>LoRa is a low-power, long-range wireless communication technology designed for the Internet of Things (IoT). It enables long-distance data transmission with minimal energy consumption, making it ideal for battery-powered devices such as sensors, trackers, and smart city applications. It operates on unlicensed radio frequencies, reducing deployment costs and increasing flexibility.</p>"},{"location":"gateberry/gateberry-expansion/#Modules","title":"Modules","text":"<p>The selected modules to enable LoRa communication on GateBerry are:</p> <ul> <li>Europe &amp; Asia: RN2483A</li> <li>America: RN2903A</li> </ul>"},{"location":"gateberry/gateberry-expansion/#Hardware-Setup_1","title":"Hardware Setup","text":"<p>When purchasing a GateBerry equipped with the LoRa communication expansion module, an additional output is provided for external antennas through female SMA coaxial connectors, which are directly linked to the communication module.</p> <p>The hardware assembly should appear as shown in the following image:</p>"},{"location":"gateberry/gateberry-expansion/#Software-setup_1","title":"Software setup","text":"<p>Both modules communicate via serial interface. On GateBerry, the assigned serial port is: <code>/dev/exp_serial</code></p> <p>First we have to set the serial port baudrate to 57600: <pre><code>stty 57600 -F /dev/exp_serial raw -echo\n</code></pre> Then reset the module via the GateBerry digital output: <pre><code>sudo ~/test/GATEBERRY_V9/GATEBERRY/set-digital-output EXP_RST 1\n</code></pre> Thats it!</p>"},{"location":"gateberry/gateberry-expansion/#Working-Test--Troubleshooting_2","title":"Working Test &amp; Troubleshooting","text":"<p>Here we share the command manual to fully configure your LoRa module.</p> <ul> <li> <p>RN2483 LoRa\u00ae Technology Module Command Reference User\u2019s Guide</p> </li> <li> <p>RN2903 LoRa\u2122 Technology Module Command Reference User\u2019s Guide</p> </li> </ul> <p>These are the basic commands we can use to check that there is communication with the LoRa module.</p> Monitor the LoRa module outputCheck module version and modelSet transmission frequencyPause MAC layerSend dataReceive data <p>In this way we will see what the LoRa module responds to us, while we send comands using another terminal. <pre><code>cat /dev/exp_serial\n</code></pre></p> <pre><code>echo -e \"sys get ver\\r\" &gt; /dev/exp_serial\n</code></pre> <p>Info</p> <p>After resetting the module with: <code>sudo ~/test/GATEBERRY_V9/GATEBERRY/set-digital-output EXP_RST 1</code>, while monitoring the serial port, the module will automatically send version and model information.</p> Expected responses (LoRa EU/ASIA)Expected responses (LoRa America) <p>Similar to: </p> <p>RN2483 1.0.5 Oct 31 2018 15:06:52</p> <p>Similar to: </p> <p>RN2903 1.0.5 Nov 06 2018 10:45:27</p> <p>Warning</p> <p>Frequency must be set according to the operating region. Before setting your LoRa module's frequency, check the authorized ISM bands in your country. Each region of the world has different allocations, so using an unauthorized frequency can cause interference with critical services (such as telecommunications, defense, or aviation) and may be subject to legal penalties.</p> <ul> <li>Asia: <pre><code>echo -e \"radio set freq 433000000\\r\" &gt; /dev/exp_serial\n</code></pre></li> <li>Europe: <pre><code>echo -e \"radio set freq 868000000\\r\" &gt; /dev/exp_serial\n</code></pre></li> <li>America: <pre><code>echo -e \"radio set freq 868000000\\r\" &gt; /dev/exp_serial\n</code></pre></li> </ul> Expected responses (LoRa EU/ASIA/America) <p>ok</p> <pre><code>echo -e \"mac pause\\r\" &gt; /dev/exp_serial\n</code></pre> Expected responses (LoRa EU/ASIA/America): <p>Value like: </p> <p>4294967245</p> <pre><code>echo -e \"radio tx AA\\r\" &gt; /dev/exp_serial\n</code></pre> Expected responses (LoRa EU/ASIA/America) <pre><code>&gt; ok\n&gt; \n&gt; radio_tx_ok\n</code></pre> <pre><code>echo -e \"radio rx 0\\r\" &gt; /dev/exp_serial \n</code></pre> Expected responses (LoRa EU/ASIA/America) <p>ok</p> <p>radio_rx [Byte value recived in hexadecimal]</p> <p>Note</p> <p>If more than 15 seconds pass without receiving a response, this message will appear. <code>radio_err</code></p> <p>In some cases the module can return this mesage: <code>invalid_param</code></p> <p>Make sure the baud rate is correct and that you end the commands with a: <code>\\r</code></p>"},{"location":"gateberry/gateberry-features-communications/","title":"GateBerry - Features &amp; Communications","text":""},{"location":"gateberry/gateberry-features-communications/#RS485","title":"RS485","text":"<p>RS485 is a serial communication standard that allows data transmission over long distances and between multiple devices using a single pair of wires. It is resistant to electrical noise and commonly used in industrial environments.</p>"},{"location":"gateberry/gateberry-features-communications/#Important-features-and-values-to-consider","title":"Important features and values \u200b\u200bto consider","text":"Interface typeRS-485 half-duplex Communication speed (baud rate)Configurable Connectors and wiringPush-in connectors (A(+) and B(-)) Termination resistor120 ohms (software configurable) <p>Recommendation</p> <p>It's recommended to use twisted pair to minimize electromagnetic interference (EMI).    If you're in a noisy environment, use shielded twisted pair (STP).</p> <p>Note</p> <p>The PLC is able to enable and disable the built-in 120 ohm termination resistor by software, to activate it if you are at one end of the bus and avoid the reflection of the signals.</p> <p>Warning</p> <p>Communication status management is not automatic. The sending/receiving status must be managed manually, controlling the DE/RE pin connected to GPIO 27</p>"},{"location":"gateberry/gateberry-features-communications/#Connections","title":"Connections","text":""},{"location":"gateberry/gateberry-features-communications/#Configurations","title":"Configurations","text":"<p>The GateBerry PLC provides an RS485 communication interface connected to the serial port <code>/dev/rs485</code>. The following instructions describe how to configure and use this interface for both data transmission and reception.</p>"},{"location":"gateberry/gateberry-features-communications/#1-Serial-Port-Configuration","title":"1. Serial Port Configuration","text":"<p>Before starting communication, the serial port baud rate must be configured. Ensure that this baud rate matches the one used on the RS485 network.</p> <p>For example: To set the baud rate to <code>38400</code> bps, run:</p> <pre><code>stty -F /dev/rs485 38400\n</code></pre>"},{"location":"gateberry/gateberry-features-communications/#2-Receiving-Messages","title":"2. Receiving Messages","text":"<p>To enable data reception on the RS485 bus, the DE/RE (Driver Enable / Receiver Enable) control pin must be set to a low level (0). In this setup, the control pin corresponds to <code>GPIO27</code>.</p> <p>Enable receive mode with the following command: <pre><code>./test/GATEBERRY_V9/GATEBERRY/set-digital-output DE_RE 0\n</code></pre></p> <p>Once configured, incoming data can be viewed using: <pre><code>cat /dev/rs485\n</code></pre></p>"},{"location":"gateberry/gateberry-features-communications/#3-Sending-Messages","title":"3. Sending Messages","text":"<p>To transmit data over RS485, the DE/RE control pin must be set to a high level (1). Use the following command to enable transmit mode: <pre><code>./test/GATEBERRY_V9/GATEBERRY/set-digital-output DE_RE 1\n</code></pre></p> <p>You can then send data through the serial port as follows: <pre><code>echo \"MSG\" &gt; /dev/rs485\n</code></pre></p>"},{"location":"gateberry/gateberry-features-communications/#4-Termination-Resistor-Configuration","title":"4. Termination Resistor Configuration","text":"<p>The RS485 bus termination resistor can be controlled via <code>GPIO17</code> on the Raspberry Pi:</p> <ul> <li>LOW = termination resistor disabled (default state)</li> <li>HIGH = termination resistor enabled (only activate if the PLC is at the end of the line)</li> </ul> <p>Check the current state of the termination resistor: <pre><code>pinctrl get 17\n</code></pre> Set the termination resistor LOW (disabled): <pre><code>pinctrl set 17 op dl\n</code></pre> Set the termination resistor HIGH (enabled): <pre><code>pinctrl set 17 op dh\n</code></pre></p>"},{"location":"gateberry/gateberry-features-communications/#5-Additional-Notes","title":"5. Additional Notes","text":"<ul> <li>Ensure that all devices connected to the RS485 bus share the same baud rate and serial communication parameters (data bits, parity, and stop bits).</li> <li>Proper control of the DE/RE line is essential to avoid bus collisions.</li> <li>Only enable the termination resistor on the device located at the end of the RS485 line.</li> <li>Correct termination and biasing resistors improve signal integrity on longer RS485 networks.</li> </ul>"},{"location":"gateberry/gateberry-features-communications/#I\u00b2C","title":"I\u00b2C","text":"<p>I\u00b2C (Inter-Integrated Circuit) is a serial communication protocol that allows multiple devices to communicate over just two wires\u2014one for data and one for the clock. It\u2019s commonly used for short-distance communication between microcontrollers and peripherals.</p>"},{"location":"gateberry/gateberry-features-communications/#Important-features-and-values-to-consider_1","title":"Important features and values \u200b\u200bto consider","text":"Interface typeI\u00b2C Connectors and wiringPush-in connectors (SDA(data) and SCL(clock)) Signal voltage5V (Pull-up resistors) <p>Danger</p> <p>Remember that our GateBerry's I\u00b2C bus has a 5V pull-up, so do not connect devices that only support I\u00b2C at 3.3V.</p>"},{"location":"gateberry/gateberry-features-communications/#Connections_1","title":"Connections","text":""},{"location":"gateberry/gateberry-features-communications/#Configurations_1","title":"Configurations","text":"<p>Note</p> <p>By default, it comes enabled with our image and includes the necessary tools for its use. Nevertheless, this is how it would be enabled and used.</p>"},{"location":"gateberry/gateberry-features-communications/#Enable-I\u00b2C","title":"Enable I\u00b2C","text":"<ol> <li>Run the following command to open the GateBerry configuration tool: <pre><code>sudo raspi-config\n</code></pre></li> <li>Navigate to Interfacing Options &gt; I2C and select Yes to enable I\u00b2C.</li> <li>Reboot the Raspberry Pi to apply the changes: <pre><code>sudo reboot\n</code></pre></li> </ol>"},{"location":"gateberry/gateberry-features-communications/#I\u00b2C-Tools","title":"I\u00b2C Tools","text":"<p>To interact with I\u00b2C devices, it is also highly recommended to install the i2c-tools package (installed by default):</p> <p><pre><code>sudo apt update\nsudo apt install i2c-tools\n</code></pre> These tools allow us to scan devices connected to the I2C bus and verify their operation.</p> <p>For example, before communicating with a device, it is useful to scan the I2C bus to detect the addresses of connected devices.  Use the following command in the terminal: <pre><code>i2cdetect -y 1\n</code></pre> There are several other useful tools as well; here is a summary:</p> Comando Descripci\u00f3n Ejemplo b\u00e1sico <code>i2cdetect</code> Detects devices on the I\u00b2C bus <code>i2cdetect -y 1</code> <code>i2cdump</code> Displays the contents of registers <code>i2cdump -y 1 0x23</code> <code>i2cget</code> Reads a value from a register <code>i2cget -y 1 0x23 0x00</code> <code>i2cset</code> Writes a value to a register <code>i2cset -y 1 0x23 0x01 0x80</code> <code>i2ctransfer</code> Advanced read/write operations <code>i2ctransfer -y 1 w1@0x23 0x00 r2</code>"},{"location":"gateberry/gateberry-features-communications/#RTC","title":"RTC","text":"<p>A Real-Time Clock (RTC) is an electronic device or integrated circuit that continuously keeps track of the current time and date, even when the main system is powered off, typically using a backup battery. It is widely used in computers, microcontrollers, and embedded systems to maintain accurate timekeeping.</p> <p>The configurations for using our integrated RTC are located in the file: <code>/boot/firmware/config.txt</code> and are as follows:</p> <pre><code>dtparam=i2c_arm=on\ndtoverlay=i2c-rtc,pcf85363\n</code></pre> <p>Once the overlay is configured and the module is detected using the command <code>sudo i2cdetect -y 1</code>, it should appear at address 0x51. The operating system (OS) should recognize it as a hardware clock (hwclock).</p> Reading the Hardware RTC TimeWriting the System Time to the Hardware RTCSetting the System Time from the Hardware RTC <p>Use the <code>hwclock</code> command with the hardware option (-r or --show):</p> <p><pre><code>sudo hwclock -r\n</code></pre>   This will display the current time stored in the RTC module's memory.</p> <p>If the system time (the one normally displayed, set by the network/NTP) is correct and you want to save it to the RTC:   <pre><code>sudo hwclock -w\n</code></pre>   This overwrites the RTC time with the current Raspberry Pi system time. It is essential to perform this at least once to set the RTC\u2019s initial time.</p> <p>If the system has booted without network access and the time is incorrect, you can use the time stored in the RTC to set the system time:</p> <p><pre><code>sudo hwclock -s\n</code></pre>   Typically, this step is performed automatically at Raspberry Pi startup if the overlay is configured correctly and the service that attempts to \"save\" unsynchronized time is disabled.</p>"},{"location":"gateberry/gateberry-features-communications/#UPS","title":"UPS","text":"<p>Our UPS is a device that, thanks to its supercapacitors, can provide temporary electrical power to the GateBerry during a power outage or supply interruption. This ensures that ongoing processes can be safely completed and prevents memory corruption.</p> <p>The unit comes preconfigured from the factory, with all necessary settings and services already set up.</p> <p>The hardware configuration is done in: <code>/boot/firmware/config.txt</code></p> <pre><code>dtoverlay=gpio-poweroff,gpiopin=23,active_low\ndtoverlay=gpio-shutdown,gpio_pin=24,gpio_pull=up\n</code></pre>"},{"location":"gateberry/gateberry-features-communications/#Pre-power-off-commands-safeguarding-your-data","title":"Pre-power off commands: safeguarding your data","text":"<p>Before shutting down the system, ensure that all critical operations are completed using the pre-shutdown hooks.</p> <p>The configurations you will see below are already set by default. If you want to learn how to use them, proceed to the following step: Usability test.</p>"},{"location":"gateberry/gateberry-features-communications/#Configurations-default","title":"Configurations (default)","text":"<p>This guide provides detailed steps to configure directories, download the necessary service files, and set up scripts to automate crucial tasks before shutdown.</p> <ol> <li> <p>Create the necessary directory (if no exists): Create the required directory to store the pre-poweroff hooks: <pre><code>sudo mkdir -p /etc/rpishutdown/hooks\n</code></pre></p> </li> <li> <p>Download the service file and hook script: Fetch the required files for the pre-poweroff service and the check script: <pre><code>sudo curl -L https://apps.industrialshields.com/main/rpi_experimental/rpiplc/rpishutdown-pre-poweroff.service \\\n     -o /lib/systemd/system/rpishutdown-pre-poweroff.service\nsudo curl -L https://apps.industrialshields.com/main/rpi_experimental/rpiplc/check-pre-poweroff-hook.sh \\\n     -o /etc/rpishutdown/hooks/check-pre-poweroff\n</code></pre></p> </li> <li> <p>Grant execution permissions: Make the pre-poweroff script executable: <pre><code>sudo chmod ugo+x /etc/rpishutdown/hooks/check-pre-poweroff\n</code></pre></p> </li> <li> <p>Enable and start the pre-poweroff service: Reload the systemd daemon and enable the new service: <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable rpishutdown-pre-poweroff\nsudo systemctl start rpishutdown-pre-poweroff\n</code></pre></p> </li> </ol>"},{"location":"gateberry/gateberry-features-communications/#Usability-test","title":"Usability test","text":"<p>As you may have seen earlier, there is a dedicated service that monitors for power outages. In such cases, it executes the file located at: <code>/etc/rpishutdown/hooks/pre-poweroff</code>.</p> <p>Info</p> <p>Any type of file (Bash Scripts, Python, C++, etc.) can be executed, but the most important thing is that the file must be called pre-poweroff without any extension (and you must indicate the file type with the corresponding Shebang).</p> <p>This setup ensures that any custom commands in the check-pre-poweroff script will be executed before the system powers off.</p>"},{"location":"gateberry/gateberry-features-communications/#Expansion-Boards","title":"Expansion Boards","text":"<p>The GateBerry includes one slot for additional communication. Currently, it supports the following connection options:</p> <ul> <li> <p>Celular networks technologies</p> <p> Getting started</p> </li> <li> <p>CAN</p> <p> Getting started</p> </li> <li> <p>LoRa </p> <p>  Getting started</p> </li> </ul>"}]}